// <auto-generated />
using System;
using ContactsManagement.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactsManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230404090454_User_Entities_Relationship")]
    partial class User_Entities_Relationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContactGroupPerson", b =>
                {
                    b.Property<int>("ContactGroupsGroupId")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContactGroupsGroupId", "PersonsId");

                    b.HasIndex("PersonsId");

                    b.ToTable("ContactGroupPerson");
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactNumber1")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ContactNumber2")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Industry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebUrl")
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.ContactGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId");

                    b.ToTable("ContactGroups", (string)null);
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.ContactLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogId");

                    b.HasIndex("PersonId");

                    b.ToTable("ContactLogs", (string)null);
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.ContactTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagColor")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId");

                    b.ToTable("ContactTags", (string)null);
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = new Guid("14629847-905a-4a0e-9abe-80b61655c5cb"),
                            CountryName = "Philippines"
                        },
                        new
                        {
                            CountryId = new Guid("72c86ea5-ac28-4659-8767-f18b1b3bcae1"),
                            CountryName = "India"
                        },
                        new
                        {
                            CountryId = new Guid("56bf46a4-02b8-4693-a0f5-0a95e2218bdc"),
                            CountryName = "Thailand"
                        },
                        new
                        {
                            CountryId = new Guid("8f30bedc-47dd-4286-8950-73d8a68e5d41"),
                            CountryName = "Palestinian Territory"
                        },
                        new
                        {
                            CountryId = new Guid("426fa230-2f08-41ee-9342-c0e890d1db0b"),
                            CountryName = "Indonesia"
                        },
                        new
                        {
                            CountryId = new Guid("501c6d33-1bbe-45f1-8fbd-2275913c6218"),
                            CountryName = "China"
                        },
                        new
                        {
                            CountryId = new Guid("675029ba-cefe-4ebb-aad1-2be8677fa2c2"),
                            CountryName = "Barbados"
                        },
                        new
                        {
                            CountryId = new Guid("20a37cf3-5864-4fb5-8cf5-c424c2ea5024"),
                            CountryName = "Tunisia"
                        },
                        new
                        {
                            CountryId = new Guid("d51e6d63-bb0d-4b80-bf9a-5cafffe2a326"),
                            CountryName = "Armenia"
                        },
                        new
                        {
                            CountryId = new Guid("aaec80f6-addc-4b59-924d-e0bfdda6ecd0"),
                            CountryName = "United Kingdom"
                        },
                        new
                        {
                            CountryId = new Guid("e7bf9f40-d7d4-4243-a54e-4a1ff3842e22"),
                            CountryName = "Myanmar"
                        },
                        new
                        {
                            CountryId = new Guid("c8af33d6-a91e-4c38-a9c9-43e3f2a01cfc"),
                            CountryName = "South Africa"
                        },
                        new
                        {
                            CountryId = new Guid("922d9564-8544-4d2d-9039-ce8d189b7905"),
                            CountryName = "Bhutan"
                        },
                        new
                        {
                            CountryId = new Guid("f21675e2-6cd8-4fbb-b3cd-d518426d3e49"),
                            CountryName = "United Arab Emirates"
                        },
                        new
                        {
                            CountryId = new Guid("c2b1bf85-dc3a-4d86-b264-3ed73d39e158"),
                            CountryName = "Saint Vincent and The Grenadines"
                        },
                        new
                        {
                            CountryId = new Guid("a4a847da-28b4-4d53-82c4-ceb937055405"),
                            CountryName = "Netherlands Antilles"
                        },
                        new
                        {
                            CountryId = new Guid("97a80edb-5d38-4b79-8cff-c3931d52f925"),
                            CountryName = "Slovak Republic"
                        },
                        new
                        {
                            CountryId = new Guid("7daafb96-a95f-4cf1-9609-77180876ed5a"),
                            CountryName = "Paraguay"
                        },
                        new
                        {
                            CountryId = new Guid("11d5331c-f255-4e75-af59-d965d52d2f37"),
                            CountryName = "Mali"
                        },
                        new
                        {
                            CountryId = new Guid("8e08fa6f-8bda-4a00-9d83-0d1a770fc4d7"),
                            CountryName = "Benin"
                        },
                        new
                        {
                            CountryId = new Guid("ea4271be-1e25-4c08-9f08-12efed713249"),
                            CountryName = "Chad"
                        },
                        new
                        {
                            CountryId = new Guid("2b8d4622-f311-4f30-8f0d-3108b90c4cb8"),
                            CountryName = "Rwanda"
                        },
                        new
                        {
                            CountryId = new Guid("411969f3-7c23-401c-ae9f-4b38670880b0"),
                            CountryName = "Macau"
                        },
                        new
                        {
                            CountryId = new Guid("aa02d6e6-be52-4fd6-8836-67bdb91dc09d"),
                            CountryName = "Samoa"
                        },
                        new
                        {
                            CountryId = new Guid("58d64518-9f9a-4f7d-bb81-f81078d273b0"),
                            CountryName = "Iran"
                        },
                        new
                        {
                            CountryId = new Guid("6fa211f1-0189-41bb-a863-c675a939c2f4"),
                            CountryName = "Belize"
                        },
                        new
                        {
                            CountryId = new Guid("9ab42a2b-ef57-4838-8296-66001e4cb751"),
                            CountryName = "Turkey"
                        },
                        new
                        {
                            CountryId = new Guid("a4b5c5b6-49fe-48e8-8e67-29247ba3cdfc"),
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = new Guid("dcb96bcb-e220-4232-aca0-7876fb5b6b4e"),
                            CountryName = "Estonia"
                        },
                        new
                        {
                            CountryId = new Guid("fc1b4376-0e75-4e1e-8b4d-5ce255c056c9"),
                            CountryName = "Brunei Darussalam"
                        },
                        new
                        {
                            CountryId = new Guid("371b816d-3407-421d-87af-a26cad181c47"),
                            CountryName = "Faroe Islands"
                        },
                        new
                        {
                            CountryId = new Guid("243b6a40-991d-4b9b-83c3-0e5f215a204e"),
                            CountryName = "Syria"
                        },
                        new
                        {
                            CountryId = new Guid("06634415-5830-41f8-8c9f-0f225a934039"),
                            CountryName = "Mozambique"
                        },
                        new
                        {
                            CountryId = new Guid("2f4fcb8d-af2d-43fc-bf29-5858c9f1d994"),
                            CountryName = "Micronesia"
                        },
                        new
                        {
                            CountryId = new Guid("73a71c65-1e2e-47b5-8c6b-ca514ef88ff7"),
                            CountryName = "Uruguay"
                        },
                        new
                        {
                            CountryId = new Guid("85a98229-096f-42ae-bddc-da9c52d381a1"),
                            CountryName = "Malaysia"
                        },
                        new
                        {
                            CountryId = new Guid("958b8c8a-083b-422f-b948-2caadd7c2e1c"),
                            CountryName = "Angola"
                        },
                        new
                        {
                            CountryId = new Guid("fb3009a8-c612-4a62-8fa5-287ba96c46a4"),
                            CountryName = "United States"
                        },
                        new
                        {
                            CountryId = new Guid("3b0c8c76-f6c7-47a1-abeb-654888e2f87f"),
                            CountryName = "Maldives"
                        },
                        new
                        {
                            CountryId = new Guid("aca1f676-0105-4384-be94-afa7b95401d1"),
                            CountryName = "Namibia"
                        },
                        new
                        {
                            CountryId = new Guid("b3563046-97b7-4f28-bbb2-fef60262208a"),
                            CountryName = "San Marino"
                        },
                        new
                        {
                            CountryId = new Guid("3aab7a3b-fdf7-46fc-b12b-5f8eaa5093e2"),
                            CountryName = "Cayman Islands"
                        },
                        new
                        {
                            CountryId = new Guid("a76c5dd7-79af-40b1-86ca-f2e473a858be"),
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryId = new Guid("b15e1a23-7e82-4ad5-b8fc-1856f577392e"),
                            CountryName = "Pakistan"
                        },
                        new
                        {
                            CountryId = new Guid("e6386ac0-ff99-4b85-9435-c1314bb74eac"),
                            CountryName = "Malawi"
                        },
                        new
                        {
                            CountryId = new Guid("0987b7cd-dd33-47e9-9540-070deab0d021"),
                            CountryName = "Italy"
                        },
                        new
                        {
                            CountryId = new Guid("0c150ae0-b96f-447b-ad9e-e313c8809f0f"),
                            CountryName = "Zambia"
                        },
                        new
                        {
                            CountryId = new Guid("10f11f25-065b-4e28-a6c7-1d53d5f2db18"),
                            CountryName = "Kazakhstan"
                        },
                        new
                        {
                            CountryId = new Guid("d1a704dc-5a40-467f-9fd9-256546e8c623"),
                            CountryName = "Grenada"
                        },
                        new
                        {
                            CountryId = new Guid("6e17de14-8689-4547-ad72-d4e828a6c50e"),
                            CountryName = "Australia"
                        },
                        new
                        {
                            CountryId = new Guid("c80a0678-b48f-4f60-a93f-6fb99a8f8ced"),
                            CountryName = "Latvia"
                        },
                        new
                        {
                            CountryId = new Guid("fcc1e8ea-00eb-44ab-a048-e5f582f16838"),
                            CountryName = "Papua New Guinea"
                        },
                        new
                        {
                            CountryId = new Guid("cf222ac1-d4a1-461f-85f4-cb05224b8607"),
                            CountryName = "Somalia"
                        },
                        new
                        {
                            CountryId = new Guid("2d5f6252-c821-4190-b25f-adc64b2beb54"),
                            CountryName = "Bahamas"
                        },
                        new
                        {
                            CountryId = new Guid("81e5a2bb-2ddf-4b1f-83fb-4dfb6be38521"),
                            CountryName = "Moldova"
                        },
                        new
                        {
                            CountryId = new Guid("ccc04c33-3f89-4e30-ac82-a8b654e5361f"),
                            CountryName = "Bouvet Island"
                        },
                        new
                        {
                            CountryId = new Guid("55d1a498-fe81-4f65-824c-7112cafcc932"),
                            CountryName = "Luxembourg"
                        },
                        new
                        {
                            CountryId = new Guid("84b118c5-b94c-4bc7-97ed-6df1c9df90c9"),
                            CountryName = "Norfolk Island"
                        },
                        new
                        {
                            CountryId = new Guid("0d69bfd9-7ea9-489f-97b8-0a3b2e4e9e5c"),
                            CountryName = "Pakistan"
                        },
                        new
                        {
                            CountryId = new Guid("0944a18b-4c3c-4714-985c-8a702f15d27e"),
                            CountryName = "Lesotho"
                        },
                        new
                        {
                            CountryId = new Guid("3d573f83-5489-49b4-8de8-45c15a57546e"),
                            CountryName = "Comoros"
                        },
                        new
                        {
                            CountryId = new Guid("f169b8e4-9f1d-4b24-81d2-48cb117f35cd"),
                            CountryName = "Lithuania"
                        },
                        new
                        {
                            CountryId = new Guid("6f2b080e-5ee8-4fa0-ad2b-0eb7eeb0ae01"),
                            CountryName = "Virgin Islands (US)"
                        },
                        new
                        {
                            CountryId = new Guid("600354a0-e1e6-4b6a-b22c-e3be00c03704"),
                            CountryName = "Chile"
                        },
                        new
                        {
                            CountryId = new Guid("716244d2-0143-4d8d-be86-c10993fd6ed9"),
                            CountryName = "Palau"
                        },
                        new
                        {
                            CountryId = new Guid("bfeacb98-4dd2-4862-ba7c-086dbf10f7b2"),
                            CountryName = "Nauru"
                        },
                        new
                        {
                            CountryId = new Guid("39e113da-b48b-4003-8199-d24e16fb8559"),
                            CountryName = "Croatia (Hrvatska)"
                        },
                        new
                        {
                            CountryId = new Guid("e8cdef5c-78db-4a05-ad8b-89b9f044523c"),
                            CountryName = "Ukraine"
                        },
                        new
                        {
                            CountryId = new Guid("8232d10c-7c34-4066-86b6-a269d67e859b"),
                            CountryName = "Slovenia"
                        },
                        new
                        {
                            CountryId = new Guid("28ce9068-9a56-4bc9-abb0-f702c4324051"),
                            CountryName = "Sudan"
                        },
                        new
                        {
                            CountryId = new Guid("c1b38414-8e43-4ce8-8d78-a4f2d12ec379"),
                            CountryName = "Hungary"
                        },
                        new
                        {
                            CountryId = new Guid("db6a70a8-de9d-403d-97fb-2e64c246cd17"),
                            CountryName = "Netherlands"
                        },
                        new
                        {
                            CountryId = new Guid("58b7d776-f7aa-4bc9-920a-e75edfa2a9be"),
                            CountryName = "Monaco"
                        },
                        new
                        {
                            CountryId = new Guid("54c1babb-7d8a-402c-a868-419b45da444f"),
                            CountryName = "Denmark"
                        },
                        new
                        {
                            CountryId = new Guid("4f648c34-3b47-4fd2-8a6d-e4a4395dec92"),
                            CountryName = "Guatemala"
                        },
                        new
                        {
                            CountryId = new Guid("fba0dcc4-4613-413b-b674-3f4456e968d4"),
                            CountryName = "Virgin Islands (British)"
                        },
                        new
                        {
                            CountryId = new Guid("bee5f0e8-c62f-4b27-9bc9-39f6f0c06bd7"),
                            CountryName = "Seychelles"
                        },
                        new
                        {
                            CountryId = new Guid("554f08dd-b195-4c67-86f7-d8213097c391"),
                            CountryName = "Dominican Republic"
                        },
                        new
                        {
                            CountryId = new Guid("b3afd179-9019-4041-a226-510714ac22a3"),
                            CountryName = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            CountryId = new Guid("1e555df1-acb2-4bb5-9972-540358afd339"),
                            CountryName = "Singapore"
                        },
                        new
                        {
                            CountryId = new Guid("abbb8e03-a0da-4c4e-84da-461e3af37d98"),
                            CountryName = "Tonga"
                        },
                        new
                        {
                            CountryId = new Guid("14783dbd-07cd-419e-93cc-7e1413a5bb27"),
                            CountryName = "New Zealand"
                        },
                        new
                        {
                            CountryId = new Guid("6954bbc3-143a-4309-b952-68a4b2a44ff4"),
                            CountryName = "Nepal"
                        },
                        new
                        {
                            CountryId = new Guid("b07d6e2e-ef16-428a-82f7-e10417f058f5"),
                            CountryName = "Argentina"
                        },
                        new
                        {
                            CountryId = new Guid("33440da8-eef8-4db9-a1b0-d1b0731c7a3c"),
                            CountryName = "Sri Lanka"
                        },
                        new
                        {
                            CountryId = new Guid("6b7bc1e5-0e23-4922-b8c3-73c4a8bd5388"),
                            CountryName = "Venezuela"
                        },
                        new
                        {
                            CountryId = new Guid("a2d996cd-4e6d-4526-bf3c-cf96434b3b7c"),
                            CountryName = "Saint Lucia"
                        },
                        new
                        {
                            CountryId = new Guid("630df031-582b-407d-96dc-4c7daf707606"),
                            CountryName = "Brazil"
                        },
                        new
                        {
                            CountryId = new Guid("51aba049-442e-4fcb-beec-0dd5ec5ea2fa"),
                            CountryName = "Zaire"
                        },
                        new
                        {
                            CountryId = new Guid("ccebcb5d-e27a-4e68-9233-d8cccf7f004c"),
                            CountryName = "Niger"
                        },
                        new
                        {
                            CountryId = new Guid("3586890d-899c-4cc6-a5c3-837fed3c5188"),
                            CountryName = "Kuwait"
                        },
                        new
                        {
                            CountryId = new Guid("90769970-605a-4729-8a06-8fed92db005c"),
                            CountryName = "Kyrgyzstan"
                        },
                        new
                        {
                            CountryId = new Guid("b0c5a1da-4f35-4085-822e-8f2c9ae738f7"),
                            CountryName = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            CountryId = new Guid("1d9c477c-9914-4a70-aaad-7ce8093b5afb"),
                            CountryName = "Bangladesh"
                        },
                        new
                        {
                            CountryId = new Guid("97e35b60-a4e0-42ee-8351-5bc998912427"),
                            CountryName = "Sweden"
                        },
                        new
                        {
                            CountryId = new Guid("61f2d43f-d00c-4f23-9ed9-f9a4275e321e"),
                            CountryName = "Antarctica"
                        },
                        new
                        {
                            CountryId = new Guid("1be05527-63ad-4f41-af76-70e6ac85f56e"),
                            CountryName = "Costa Rica"
                        },
                        new
                        {
                            CountryId = new Guid("c75e7da9-5c34-495f-ad8e-4f39842ca18b"),
                            CountryName = "Liberia"
                        },
                        new
                        {
                            CountryId = new Guid("caf788a4-05c6-4da0-ae4a-2113ab4ae9d3"),
                            CountryName = "Israel"
                        },
                        new
                        {
                            CountryId = new Guid("a782cd1f-c834-47ae-b899-5d3a3248b0d0"),
                            CountryName = "French Southern Territories"
                        },
                        new
                        {
                            CountryId = new Guid("6f424086-2026-4745-bf15-0a465093387f"),
                            CountryName = "Poland"
                        },
                        new
                        {
                            CountryId = new Guid("76f919c3-af0a-4308-a956-2266f69c338f"),
                            CountryName = "El Salvador"
                        },
                        new
                        {
                            CountryId = new Guid("78d0f853-dd98-4945-a5ab-80fe17677219"),
                            CountryName = "Laos"
                        },
                        new
                        {
                            CountryId = new Guid("919c9b38-3828-48cd-9489-04e0e4a649da"),
                            CountryName = "Eritrea"
                        },
                        new
                        {
                            CountryId = new Guid("44470715-f088-4287-ab26-656806c16cfa"),
                            CountryName = "Nepal"
                        },
                        new
                        {
                            CountryId = new Guid("535bbb1c-fd25-4547-98c3-86388ad94502"),
                            CountryName = "Japan"
                        },
                        new
                        {
                            CountryId = new Guid("5673f5f4-0822-4ed3-a07e-a005cbd4058a"),
                            CountryName = "St. Helena"
                        },
                        new
                        {
                            CountryId = new Guid("a8484cb9-ceee-4429-a499-4fa7ed3f3b41"),
                            CountryName = "Zimbabwe"
                        },
                        new
                        {
                            CountryId = new Guid("18c83817-caf8-442d-bffd-ee0cac07992c"),
                            CountryName = "American Samoa"
                        },
                        new
                        {
                            CountryId = new Guid("3df411fb-c727-4332-afc2-b53a4a211f7d"),
                            CountryName = "San Marino"
                        },
                        new
                        {
                            CountryId = new Guid("d9a5edee-010c-48c5-8cc0-3409a400ae84"),
                            CountryName = "Guinea"
                        },
                        new
                        {
                            CountryId = new Guid("ce48b97e-82c2-477d-80ab-d3e068a53ec6"),
                            CountryName = "Ghana"
                        },
                        new
                        {
                            CountryId = new Guid("346b8c16-58f5-4352-a2cc-383bccd325e7"),
                            CountryName = "South Korea"
                        },
                        new
                        {
                            CountryId = new Guid("fae9617d-fe6b-40aa-9b13-77e795b8a338"),
                            CountryName = "Senegal"
                        },
                        new
                        {
                            CountryId = new Guid("830a1bc0-5449-4520-a224-fad748948403"),
                            CountryName = "Norfolk Island"
                        },
                        new
                        {
                            CountryId = new Guid("daa2ce2f-33ea-48d4-a5b8-39aa9847e9ee"),
                            CountryName = "Tanzania"
                        },
                        new
                        {
                            CountryId = new Guid("18e8b068-cc9a-4e0b-8385-db7a0e211b29"),
                            CountryName = "Samoa"
                        },
                        new
                        {
                            CountryId = new Guid("eb4d908a-1baa-4db8-ae54-1fef08e4d600"),
                            CountryName = "Sudan"
                        },
                        new
                        {
                            CountryId = new Guid("76c7d6d2-d465-4f55-b26f-e6db272974d7"),
                            CountryName = "Equatorial Guinea"
                        },
                        new
                        {
                            CountryId = new Guid("79d80262-d2bd-4ee7-8f46-6431db299bcb"),
                            CountryName = "Lebanon"
                        },
                        new
                        {
                            CountryId = new Guid("e154eaf8-de78-4cb6-975e-b5cfdfeec1b3"),
                            CountryName = "Mexico"
                        },
                        new
                        {
                            CountryId = new Guid("fce60ffa-73df-471e-a7d9-05e74b548bb2"),
                            CountryName = "Saudi Arabia"
                        },
                        new
                        {
                            CountryId = new Guid("a55bbc6d-694c-4375-b414-4769eb0db1c4"),
                            CountryName = "Portugal"
                        },
                        new
                        {
                            CountryId = new Guid("5344edda-105a-4d85-ba32-139d87ed118c"),
                            CountryName = "Peru"
                        },
                        new
                        {
                            CountryId = new Guid("c69af304-ab7f-406f-8db2-d13e423ff4fc"),
                            CountryName = "New Caledonia"
                        },
                        new
                        {
                            CountryId = new Guid("7f7a3d5a-d640-40af-b828-4de12e0afa02"),
                            CountryName = "Colombia"
                        },
                        new
                        {
                            CountryId = new Guid("b33f5913-ac4d-4e1a-98fe-0f982c009702"),
                            CountryName = "Russia"
                        },
                        new
                        {
                            CountryId = new Guid("3e6e5988-4626-44f6-b238-c9c270c3b77f"),
                            CountryName = "Taiwan"
                        },
                        new
                        {
                            CountryId = new Guid("a365c87f-e0ce-41a9-8ba4-929dc29c213e"),
                            CountryName = "Kiribati"
                        },
                        new
                        {
                            CountryId = new Guid("143bdd7c-6c66-4e92-a1ab-fabc149d455c"),
                            CountryName = "Qatar"
                        },
                        new
                        {
                            CountryId = new Guid("e132770d-c01c-4cf1-9d58-328fd93ac85c"),
                            CountryName = "Georgia"
                        },
                        new
                        {
                            CountryId = new Guid("aa95d11a-7cac-4e3d-8cc2-8d57f38b7ee0"),
                            CountryName = "Bhutan"
                        },
                        new
                        {
                            CountryId = new Guid("12db8c33-ca13-44e9-b42e-b387da03ceaa"),
                            CountryName = "Cyprus"
                        },
                        new
                        {
                            CountryId = new Guid("1587b94b-e646-462b-a83d-67c344074f6a"),
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = new Guid("fc2a2e61-acd9-49d7-b058-c13770082e3a"),
                            CountryName = "Czech Republic"
                        },
                        new
                        {
                            CountryId = new Guid("11f1f356-f3d6-4ac3-ac84-944451c39109"),
                            CountryName = "Spain"
                        },
                        new
                        {
                            CountryId = new Guid("4990b771-1ead-48f4-98a9-36078685d310"),
                            CountryName = "Tunisia"
                        },
                        new
                        {
                            CountryId = new Guid("b24423a8-faa2-443c-be52-35ae535ac393"),
                            CountryName = "Central African Republic"
                        },
                        new
                        {
                            CountryId = new Guid("114882e6-257a-4774-8330-17f7c8e609d2"),
                            CountryName = "Monaco"
                        },
                        new
                        {
                            CountryId = new Guid("87359e52-55e7-42b5-9258-0ba1709a0022"),
                            CountryName = "Cuba"
                        });
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ThemeColor")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("EventId");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber1")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ContactNumber2")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfileBlobUrl")
                        .HasMaxLength(1028)
                        .HasColumnType("nvarchar(1028)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TagId");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ContactGroupPerson", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.Entities.ContactsManager.ContactGroup", null)
                        .WithMany()
                        .HasForeignKey("ContactGroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactsManagement.Core.Domain.Entities.ContactsManager.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.ContactLog", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.Entities.ContactsManager.Person", "PersonLog")
                        .WithMany("ContactLogs")
                        .HasForeignKey("PersonId");

                    b.Navigation("PersonLog");
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.Person", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.Entities.ContactsManager.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ContactsManagement.Core.Domain.Entities.ContactsManager.Country", "Country")
                        .WithMany("Persons")
                        .HasForeignKey("CountryId");

                    b.HasOne("ContactsManagement.Core.Domain.Entities.ContactsManager.ContactTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.Entities.ContactsManager.Company", "company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ContactsManagement.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.Company", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.Country", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("ContactsManagement.Core.Domain.Entities.ContactsManager.Person", b =>
                {
                    b.Navigation("ContactLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
